#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple CLI script to test the model interface
"""

import sys
import os
from model_interface import ModelInterface

def test_single_client():
    """Test with a single client"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–¥–µ–ª–∏\n")
    
    # Initialize interface
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–¥–µ–ª–∏...")
    interface = ModelInterface()
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (ML –º–æ–¥–µ–ª—å: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if interface.ml_model_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'})\n")
    
    # Load data
    from data_loader import load_clients, load_client_tables
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    clients = load_clients("data/clients.csv")
    tables = load_client_tables()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤\n")
    
    # Process first client
    client_row = clients.iloc[0]
    client_id = int(client_row['client_code'])
    
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {client_row['name']}")
    print(f"  –°—Ç–∞—Ç—É—Å: {client_row['status']}")
    print(f"  –í–æ–∑—Ä–∞—Å—Ç: {client_row['age']}")
    print(f"  –ì–æ—Ä–æ–¥: {client_row['city']}")
    print(f"  –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {client_row['avg_monthly_balance_KZT']:,.0f} ‚Ç∏\n")
    
    # Get client data
    tx = tables.get(client_id, {}).get("tx", None)
    tr = tables.get(client_id, {}).get("tr", None)
    
    if tx is not None and not tx.empty:
        print(f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(tx)}")
        print(f"  –û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç: {tx['amount'].sum():,.0f} ‚Ç∏")
        print(f"  –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(tx.groupby('category')['amount'].sum().nlargest(3).index.tolist())}")
    else:
        print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
    
    if tr is not None and not tr.empty:
        print(f"  –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {len(tr)}")
    else:
        print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö")
    
    print("\n" + "="*60)
    
    # Test different methods
    methods = ["rules", "hybrid"]
    if interface.ml_model_available:
        methods.append("ml")
    
    for method in methods:
        print(f"\nüîç –ú–µ—Ç–æ–¥: {method.upper()}")
        
        try:
            result = interface.generate_push_notification(
                client_row, tx, tr, 
                ollama_model=None,  # No Ollama for quick test
                prediction_method=method
            )
            
            print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç: {result['product']}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
            print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞: {result['expected_benefit']:,.0f} ‚Ç∏")
            print(f"üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
            print(f"   {result['push_notification']}")
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'OK' if result['validation']['ok'] else '–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}")
            
            if not result['validation']['ok']:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['validation']['issues'])}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {method}: {e}")
    
    print("\n" + "="*60)
    print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    """Main CLI function"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "--test":
            test_single_client()
        elif sys.argv[1] == "--help":
            print("""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python cli_test.py --test     # –¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
  python cli_test.py --help     # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
  
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
  python web_interface.py
  
–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:
  python model_interface.py --output out/results.csv
            """)
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        print("–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        test_single_client()

if __name__ == "__main__":
    main()
