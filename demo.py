#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demonstration script for the Push Notification Generator Interface
Showcases all features of the model interface
"""

import sys
import pandas as pd
from model_interface import ModelInterface
from data_loader import load_clients, load_client_tables

def demo_interface():
    """Comprehensive demonstration of the interface"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê PUSH NOTIFICATION GENERATOR")
    print("=" * 60)
    
    # Step 1: Initialize Interface
    print("\nüìã –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    interface = ModelInterface()
    
    print(f"‚úÖ ML –º–æ–¥–µ–ª—å: {'–î–æ—Å—Ç—É–ø–Ω–∞' if interface.ml_model_available else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–∞)'}")
    print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(interface.product_classes)}")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {interface.config_path}")
    
    # Step 2: Load Data
    print("\nüìä –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    clients = load_clients("data/clients.csv")
    tables = load_client_tables()
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: {len([c for c in tables.keys() if 'tx' in tables[c]])}")
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: {len([c for c in tables.keys() if 'tr' in tables[c]])}")
    
    # Step 3: Analyze Product Distribution
    print("\nüìà –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ø–µ—Ä–≤—ã–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤)")
    product_count = {}
    benefit_stats = []
    
    for i in range(min(10, len(clients))):
        client_row = clients.iloc[i]
        client_id = int(client_row['client_code'])
        
        tx = tables.get(client_id, {}).get("tx", pd.DataFrame())
        tr = tables.get(client_id, {}).get("tr", pd.DataFrame())
        
        best_product, confidence = interface.get_best_product(client_row, tx, tr, "hybrid")
        
        product_count[best_product] = product_count.get(best_product, 0) + 1
        benefit_stats.append(confidence)
        
        print(f"  –ö–ª–∏–µ–Ω—Ç {client_id} ({client_row['name']}): {best_product} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f})")
    
    print(f"\nüìä –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
    for product, count in sorted(product_count.items(), key=lambda x: x[1], reverse=True):
        print(f"  ‚Ä¢ {product}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # Step 4: Detailed Client Analysis
    print("\nüîç –®–∞–≥ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞")
    
    # Pick an interesting client (with good transaction data)
    best_client_idx = 0
    max_transactions = 0
    
    for i, client_row in clients.iterrows():
        client_id = int(client_row['client_code'])
        tx = tables.get(client_id, {}).get("tx", pd.DataFrame())
        if len(tx) > max_transactions:
            max_transactions = len(tx)
            best_client_idx = i
    
    client_row = clients.iloc[best_client_idx]
    client_id = int(client_row['client_code'])
    tx = tables.get(client_id, {}).get("tx", pd.DataFrame())
    tr = tables.get(client_id, {}).get("tr", pd.DataFrame())
    
    print(f"–í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: {client_row['name']} (ID: {client_id})")
    print(f"  –°—Ç–∞—Ç—É—Å: {client_row['status']}")
    print(f"  –í–æ–∑—Ä–∞—Å—Ç: {client_row['age']} –ª–µ—Ç")
    print(f"  –ì–æ—Ä–æ–¥: {client_row['city']}")
    print(f"  –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {client_row['avg_monthly_balance_KZT']:,.0f} ‚Ç∏")
    
    if not tx.empty:
        print(f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(tx)}")
        print(f"  –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã: {tx['amount'].sum():,.0f} ‚Ç∏")
        top_cats = tx.groupby('category')['amount'].sum().nlargest(3)
        print(f"  –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(top_cats.index.tolist())}")
    
    # Step 5: Compare All Methods
    print(f"\n‚öñÔ∏è –®–∞–≥ 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    
    methods = ["rules", "hybrid"]
    if interface.ml_model_available:
        methods.append("ml")
    
    results = {}
    for method in methods:
        result = interface.generate_push_notification(
            client_row, tx, tr, 
            ollama_model=None,  # No Ollama for speed
            prediction_method=method
        )
        results[method] = result
        
        print(f"\nüî∏ –ú–µ—Ç–æ–¥: {method.upper()}")
        print(f"  –ü—Ä–æ–¥—É–∫—Ç: {result['product']}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
        print(f"  –í—ã–≥–æ–¥–∞: {result['expected_benefit']:,.0f} ‚Ç∏")
        print(f"  Push: {result['push_notification'][:100]}...")
        print(f"  –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ OK' if result['validation']['ok'] else '‚ùå ' + ', '.join(result['validation']['issues'])}")
    
    # Step 6: Generate CSV Sample
    print(f"\nüíæ –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    sample_results = []
    for i in range(min(5, len(clients))):
        client_row = clients.iloc[i]
        client_id = int(client_row['client_code'])
        
        tx = tables.get(client_id, {}).get("tx", pd.DataFrame())
        tr = tables.get(client_id, {}).get("tr", pd.DataFrame())
        
        result = interface.generate_push_notification(
            client_row, tx, tr, 
            ollama_model=None,
            prediction_method="hybrid"
        )
        
        sample_results.append({
            'client_code': result['client_code'],
            'product': result['product'],
            'push_notification': result['push_notification']
        })
    
    # Save sample
    sample_df = pd.DataFrame(sample_results)
    sample_path = "out/demo_sample.csv"
    sample_df.to_csv(sample_path, index=False, encoding='utf-8')
    
    print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {sample_path}")
    print("\n–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:")
    for _, row in sample_df.iterrows():
        print(f"  –ö–ª–∏–µ–Ω—Ç {row['client_code']}: {row['product']}")
        print(f"    \"{row['push_notification'][:80]}...\"")
        print()
    
    # Step 7: Instructions for Full Usage
    print("üéØ –®–∞–≥ 7: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("\n–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    print("  python model_interface.py --output out/all_recommendations.csv")
    print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Ollama:")
    print("  python model_interface.py --ollama-model mistral:7b --method hybrid")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    print("  python web_interface.py")
    print("  # –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000")
    
    print("\n" + "=" * 60)
    print("üèÅ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

def show_available_products():
    """Show all available products and their descriptions"""
    interface = ModelInterface()
    
    print("üì¶ –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–î–£–ö–¢–´")
    print("=" * 40)
    
    product_descriptions = {
        "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–µ—à–±—ç–∫ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Ç–∞–∫—Å–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": "–ë–∞–∑–æ–≤—ã–π –∫–µ—à–±—ç–∫ 2-4%, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã/–∫–æ—Å–º–µ—Ç–∏–∫—É/—é–≤–µ–ª–∏—Ä–∫—É",
        "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": "–î–æ 10% –≤ 3 –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö + 10% –Ω–∞ –æ–Ω–ª–∞–π–Ω-—É—Å–ª—É–≥–∏",
        "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": "–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Å–ø—Ä–µ–¥–µ, –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –∫—É—Ä—Å—É",
        "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏": "–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é, –≥–∏–±–∫–∏–µ –ø–æ–≥–∞—à–µ–Ω–∏—è",
        "–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã + —É–¥–æ–±—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç",
        "–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ —Å—á—ë—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤",
        "–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π": "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞, —Å–Ω—è—Ç–∏–µ –Ω–µ—Ç",
        "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "–ù—É–ª–µ–≤—ã–µ/—Å–Ω–∏–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏, –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞",
        "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏": "–ó–∞—â–∏—Ç–Ω—ã–π –∞–∫—Ç–∏–≤/–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"
    }
    
    for i, product in enumerate(interface.product_classes, 1):
        description = product_descriptions.get(product, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        print(f"{i:2d}. {product}")
        print(f"    {description}")
        print()

def main():
    """Main function with CLI options"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "--demo":
            demo_interface()
        elif sys.argv[1] == "--products":
            show_available_products()
        elif sys.argv[1] == "--help":
            print("""
Push Notification Generator - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python demo.py --demo      # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
  python demo.py --products  # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  python demo.py --help      # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
  python web_interface.py    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  python cli_test.py --test  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            """)
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        demo_interface()

if __name__ == "__main__":
    main()
